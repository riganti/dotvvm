name: Publish to internal feed

on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        options:
          - InternalPreview
          - PublicPreview
          - Stable
        default: InternalPreview
        description: The type of release (determines version format)
        required: false
      version-core:
        type: string
        default: "4.1.0"
        description: The core part of the version string
        required: false
      prerelease-version:
        type: string
        default: preview01
        description: The prerelease suffix appended after the core version
        required: false
      signature-type:
        type: choice
        options:
          - DotNetFoundation
          - Riganti
        default: DotNetFoundation
        description: The signature to be used to sign the packages.
        required: false

jobs:
  read-input:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: read
        run: >
          PACKAGES=$(cat ./.github/workflows/nuget-packages.json);
          PACKAGES="${PACKAGES//'%'/'%25'}";
          PACKAGES="${PACKAGES//$'\n'/'%0A'}";
          PACKAGES="${PACKAGES//$'\r'/'%0D'}";
          echo "packages={\"include\":$PACKAGES}" >> $GITHUB_OUTPUT
      - run: >
          if [ "${{ inputs.release-type }}" == 'InternalPreview' ]; then
            DOTVVM_VERSION="${{ inputs.version-core}}-${{ inputs.prerelease-version }}-${{ github.run-number}}";
          elif [ "${{ inputs.release-type }}" == 'PublicPreview' ]; then
            DOTVVM_VERSION="${{ inputs.version-core}}-${{ inputs.prerelease-version }}-final";
          elif [ "${{ inputs.release-type }}" == 'Stable' ]; then
            DOTVVM_VERSION="${{ inputs.version-core}}-${{ inputs.prerelease-version }}";
          else
            echo "Unknown release type '${{ inputs.release-type }}'.";
            exit 1;
          fi;
          echo "DOTVVM_VERSION=${DOTVVM_VERSION}" >> $GITHUB_ENV;
    outputs:
      packages: ${{ steps.read.outputs.packages }}

  publish-package:
    runs-on: windows-2022
    timeout-minutes: 10
    needs: read-input
    strategy:
      matrix: ${{ fromJson(needs.read-input.outputs.packages) }}
    steps:

    - uses: actions/checkout@v2

    - name: Set up
      uses: ./.github/setup

    - name: Pack ${{ matrix.name }}
      uses: ./.github/pack
      with:
        project: ${{ matrix.project }}

    - name: Prepare signclient config
      if: ${{ inputs.signature-type == 'DotNetFoundation' }}
      run: Write-Output "$env:SIGN_CONFIG" | Out-File "${{ github.workspace }}/signconfig.json"
      env:
        SIGN_CONFIG: ${{ secrets.SIGN_CONFIG }}
      working-directory: ${{ github.workspace }}/src

    - name: Sign ${{ matrix.name }} (.NET Foundation)
      if: ${{ inputs.signature-type == 'DotNetFoundation' }}
      run: >
        dotnet signclient sign `
          --baseDirectory "${{ github.workspace}}/artifacts/packages" `
          --input "*.nupkg" `
          --config "${{ github.workspace }}/signconfig.json" `
          --user "${{ secrets.SIGN_USER }}" `
          --secret "${{ secrets.SIGN_SECRET }}" `
          --name "${{ matrix.name }}" `
          --description "$('${{ matrix.name }}' + " " + $env:DOTVVM_VERSION)" `
          --descriptionUrl "https://github.com/riganti/dotvvm"
      working-directory: ${{ github.workspace }}/src

    - name: Sign ${{ matrix.name }} (Riganti)
      if: ${{ inputs.signature-type == 'Riganti' }}
      run: >
        dotnet NuGetKeyVaultSignTool sign `
          --file-digest sha256 `
          --timestamp-rfc3161 http://timestamp.digicert.com `
          --timestamp-digest sha256 `
          --azure-key-vault-url "${{ secrets.SIGN_RIGANTI_KEYVAULT_URL }}" `
          --azure-key-vault-client-id "${{ secrets.SIGN_RIGANTI_CLIENT_ID }}" `
          --azure-key-vault-tenant-id "${{ secrets.SIGN_RIGANTI_TENANT_ID }}" `
          --azure-key-vault-client-secret "${{ secrets.SIGN_RIGANTI_SECRET }}" `
          --azure-key-vault-certificate "${{ secrets.SIGN_RIGANTI_CERTIFICATE_NAME }}" `
          (Resolve-Path "${{ github.workspace }}/artifacts/packages/*.nupkg")`

    # - name: dotvvm-types
    #   run: >
    #     cd "${{ github.workspace }}/src/Framework/Framework" && `
    #     npm run tsc-types && `
    #     cd "${{ github.workspace }}/ci/scripts/npm" && `
    #     cp "${{ github.workspace }}/src/Framework/Framework/obj/typescript-types/dotvvm.d.ts" index.d.ts && `
    #     npm version "$env:DOTVVM_VERSION" --no-git-tag-version && `
    #     cat "${{ github.workspace }}/ci/scripts/npm/dotvvm-types/package.json"

    - name: Publish ${{ matrix.name }}
      run: >
        dotnet nuget add source `
          --username "${{ secrets.AZURE_ARTIFACTS_USERNAME }}" `
          --password "${{ secrets.AZURE_ARTIFACTS_PAT }}" `
          --store-password-in-clear-text `
          --name internal `
          "${{ secrets.AZURE_ARTIFACTS_FEED }}"

        Get-ChildItem -Path "${{ github.workspace }}/artifacts/packages" -Filter "*.nupkg" | ForEach-Object {
          dotnet nuget push --api-key az --source internal "$($_.FullName)"
        }
      working-directory: ${{ github.workspace }}

    # - name: Publish dotvvm-types to the internal feed
    #   uses: JS-DevTools/npm-publish@v1
    #   with:
    #     token: ${{ secrets.NPM_TOKEN }}
    #     package: ${{ github.workspace }}/ci/scripts/npm/dotvvm-types/package.json
    #     dry-run: true

  publish-dotvvm-types:
    runs-on: windows-2022
    needs: read-input
    steps:
    - uses: actions/checkout@v2

    - name: Set up
      uses: ./.github/setup

    - name: Build Framework
      uses: ./.github/pack
      with:
        project: src/Framework/Framework

    - name: Build dotvvm-types
      run: npm run tsc-types
      working-directory: src/Framework/Framework

    - name: Compose dotvvm-types
      run: >
        mkdir types;
        cp "${{ github.workspace }}/src/Framework/Framework/obj/typescript-types/dotvvm.d.ts" types/index.d.ts;
        npm version "$env:DOTVVM_VERSION" --no-git-tag-version;
        cat "${{ github.workspace }}/ci/scripts/npm/dotvvm-types/package.json";
      working-directory: ci/scripts/npm/dotvvm-types

    - name: Configure internal npm registry
      run: >
        $password = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("${{ secrets.INTERNAL_NPM_PAT }}"));
        $feed = "${{ secrets.INTERNAL_NPM_REGISTRY }}".Trim("https:");
        npm set --location project `
          always-auth=true `
          registry=${{ secrets.INTERNAL_NPM_REGISTRY }} `
          ${feed}:username=${{ secrets.INTERNAL_NPM_USERNAME }} `
          ${feed}:email=${{ secrets.INTERNAL_NPM_EMAIL }} `
          ${feed}:_password=$password
      working-directory: ci/scripts/npm/dotvvm-types

    - name: Publish dotvvm-types
      run: npm publish
      working-directory: ci/scripts/npm/dotvvm-types
